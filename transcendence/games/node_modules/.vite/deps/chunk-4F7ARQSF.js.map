{
  "version": 3,
  "sources": ["../../three/examples/jsm/postprocessing/RenderPixelatedPass.js"],
  "sourcesContent": ["import {\r\n\tWebGLRenderTarget,\r\n\tMeshNormalMaterial,\r\n\tShaderMaterial,\r\n\tVector2,\r\n\tVector4,\r\n\tDepthTexture,\r\n\tNearestFilter,\r\n\tHalfFloatType\r\n} from 'three';\r\nimport { Pass, FullScreenQuad } from './Pass.js';\r\n\r\nclass RenderPixelatedPass extends Pass {\r\n\r\n\tconstructor( pixelSize, scene, camera, options = {} ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.pixelSize = pixelSize;\r\n\t\tthis.resolution = new Vector2();\r\n\t\tthis.renderResolution = new Vector2();\r\n\r\n\t\tthis.pixelatedMaterial = this.createPixelatedMaterial();\r\n\t\tthis.normalMaterial = new MeshNormalMaterial();\r\n\r\n\t\tthis.fsQuad = new FullScreenQuad( this.pixelatedMaterial );\r\n\t\tthis.scene = scene;\r\n\t\tthis.camera = camera;\r\n\r\n\t\tthis.normalEdgeStrength = options.normalEdgeStrength || 0.3;\r\n\t\tthis.depthEdgeStrength = options.depthEdgeStrength || 0.4;\r\n\r\n\t\tthis.beautyRenderTarget = new WebGLRenderTarget();\r\n\t\tthis.beautyRenderTarget.texture.minFilter = NearestFilter;\r\n\t\tthis.beautyRenderTarget.texture.magFilter = NearestFilter;\r\n\t\tthis.beautyRenderTarget.texture.type = HalfFloatType;\r\n\t\tthis.beautyRenderTarget.depthTexture = new DepthTexture();\r\n\r\n\t\tthis.normalRenderTarget = new WebGLRenderTarget();\r\n\t\tthis.normalRenderTarget.texture.minFilter = NearestFilter;\r\n\t\tthis.normalRenderTarget.texture.magFilter = NearestFilter;\r\n\t\tthis.normalRenderTarget.texture.type = HalfFloatType;\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.beautyRenderTarget.dispose();\r\n\t\tthis.normalRenderTarget.dispose();\r\n\r\n\t\tthis.pixelatedMaterial.dispose();\r\n\t\tthis.normalMaterial.dispose();\r\n\r\n\t\tthis.fsQuad.dispose();\r\n\r\n\t}\r\n\r\n\tsetSize( width, height ) {\r\n\r\n\t\tthis.resolution.set( width, height );\r\n\t\tthis.renderResolution.set( ( width / this.pixelSize ) | 0, ( height / this.pixelSize ) | 0 );\r\n\t\tconst { x, y } = this.renderResolution;\r\n\t\tthis.beautyRenderTarget.setSize( x, y );\r\n\t\tthis.normalRenderTarget.setSize( x, y );\r\n\t\tthis.fsQuad.material.uniforms.resolution.value.set( x, y, 1 / x, 1 / y );\r\n\r\n\t}\r\n\r\n\tsetPixelSize( pixelSize ) {\r\n\r\n\t\tthis.pixelSize = pixelSize;\r\n\t\tthis.setSize( this.resolution.x, this.resolution.y );\r\n\r\n\t}\r\n\r\n\trender( renderer, writeBuffer ) {\r\n\r\n\t\tconst uniforms = this.fsQuad.material.uniforms;\r\n\t\tuniforms.normalEdgeStrength.value = this.normalEdgeStrength;\r\n\t\tuniforms.depthEdgeStrength.value = this.depthEdgeStrength;\r\n\r\n\t\trenderer.setRenderTarget( this.beautyRenderTarget );\r\n\t\trenderer.render( this.scene, this.camera );\r\n\r\n\t\tconst overrideMaterial_old = this.scene.overrideMaterial;\r\n\t\trenderer.setRenderTarget( this.normalRenderTarget );\r\n\t\tthis.scene.overrideMaterial = this.normalMaterial;\r\n\t\trenderer.render( this.scene, this.camera );\r\n\t\tthis.scene.overrideMaterial = overrideMaterial_old;\r\n\r\n\t\tuniforms.tDiffuse.value = this.beautyRenderTarget.texture;\r\n\t\tuniforms.tDepth.value = this.beautyRenderTarget.depthTexture;\r\n\t\tuniforms.tNormal.value = this.normalRenderTarget.texture;\r\n\r\n\t\tif ( this.renderToScreen ) {\r\n\r\n\t\t\trenderer.setRenderTarget( null );\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderer.setRenderTarget( writeBuffer );\r\n\r\n\t\t\tif ( this.clear ) renderer.clear();\r\n\r\n\t\t}\r\n\r\n\t\tthis.fsQuad.render( renderer );\r\n\r\n\t}\r\n\r\n\tcreatePixelatedMaterial() {\r\n\r\n\t\treturn new ShaderMaterial( {\r\n\t\t\tuniforms: {\r\n\t\t\t\ttDiffuse: { value: null },\r\n\t\t\t\ttDepth: { value: null },\r\n\t\t\t\ttNormal: { value: null },\r\n\t\t\t\tresolution: {\r\n\t\t\t\t\tvalue: new Vector4(\r\n\t\t\t\t\t\tthis.renderResolution.x,\r\n\t\t\t\t\t\tthis.renderResolution.y,\r\n\t\t\t\t\t\t1 / this.renderResolution.x,\r\n\t\t\t\t\t\t1 / this.renderResolution.y,\r\n\t\t\t\t\t)\r\n\t\t\t\t},\r\n\t\t\t\tnormalEdgeStrength: { value: 0 },\r\n\t\t\t\tdepthEdgeStrength: { value: 0 }\r\n\t\t\t},\r\n\t\t\tvertexShader: /* glsl */`\r\n\t\t\t\tvarying vec2 vUv;\r\n\r\n\t\t\t\tvoid main() {\r\n\r\n\t\t\t\t\tvUv = uv;\r\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t\t\tfragmentShader: /* glsl */`\r\n\t\t\t\tuniform sampler2D tDiffuse;\r\n\t\t\t\tuniform sampler2D tDepth;\r\n\t\t\t\tuniform sampler2D tNormal;\r\n\t\t\t\tuniform vec4 resolution;\r\n\t\t\t\tuniform float normalEdgeStrength;\r\n\t\t\t\tuniform float depthEdgeStrength;\r\n\t\t\t\tvarying vec2 vUv;\r\n\r\n\t\t\t\tfloat getDepth(int x, int y) {\r\n\r\n\t\t\t\t\treturn texture2D( tDepth, vUv + vec2(x, y) * resolution.zw ).r;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvec3 getNormal(int x, int y) {\r\n\r\n\t\t\t\t\treturn texture2D( tNormal, vUv + vec2(x, y) * resolution.zw ).rgb * 2.0 - 1.0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfloat depthEdgeIndicator(float depth, vec3 normal) {\r\n\r\n\t\t\t\t\tfloat diff = 0.0;\r\n\t\t\t\t\tdiff += clamp(getDepth(1, 0) - depth, 0.0, 1.0);\r\n\t\t\t\t\tdiff += clamp(getDepth(-1, 0) - depth, 0.0, 1.0);\r\n\t\t\t\t\tdiff += clamp(getDepth(0, 1) - depth, 0.0, 1.0);\r\n\t\t\t\t\tdiff += clamp(getDepth(0, -1) - depth, 0.0, 1.0);\r\n\t\t\t\t\treturn floor(smoothstep(0.01, 0.02, diff) * 2.) / 2.;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfloat neighborNormalEdgeIndicator(int x, int y, float depth, vec3 normal) {\r\n\r\n\t\t\t\t\tfloat depthDiff = getDepth(x, y) - depth;\r\n\t\t\t\t\tvec3 neighborNormal = getNormal(x, y);\r\n\r\n\t\t\t\t\t// Edge pixels should yield to faces who's normals are closer to the bias normal.\r\n\t\t\t\t\tvec3 normalEdgeBias = vec3(1., 1., 1.); // This should probably be a parameter.\r\n\t\t\t\t\tfloat normalDiff = dot(normal - neighborNormal, normalEdgeBias);\r\n\t\t\t\t\tfloat normalIndicator = clamp(smoothstep(-.01, .01, normalDiff), 0.0, 1.0);\r\n\r\n\t\t\t\t\t// Only the shallower pixel should detect the normal edge.\r\n\t\t\t\t\tfloat depthIndicator = clamp(sign(depthDiff * .25 + .0025), 0.0, 1.0);\r\n\r\n\t\t\t\t\treturn (1.0 - dot(normal, neighborNormal)) * depthIndicator * normalIndicator;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfloat normalEdgeIndicator(float depth, vec3 normal) {\r\n\r\n\t\t\t\t\tfloat indicator = 0.0;\r\n\r\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(0, -1, depth, normal);\r\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(0, 1, depth, normal);\r\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(-1, 0, depth, normal);\r\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(1, 0, depth, normal);\r\n\r\n\t\t\t\t\treturn step(0.1, indicator);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvoid main() {\r\n\r\n\t\t\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\r\n\r\n\t\t\t\t\tfloat depth = 0.0;\r\n\t\t\t\t\tvec3 normal = vec3(0.0);\r\n\r\n\t\t\t\t\tif (depthEdgeStrength > 0.0 || normalEdgeStrength > 0.0) {\r\n\r\n\t\t\t\t\t\tdepth = getDepth(0, 0);\r\n\t\t\t\t\t\tnormal = getNormal(0, 0);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfloat dei = 0.0;\r\n\t\t\t\t\tif (depthEdgeStrength > 0.0)\r\n\t\t\t\t\t\tdei = depthEdgeIndicator(depth, normal);\r\n\r\n\t\t\t\t\tfloat nei = 0.0;\r\n\t\t\t\t\tif (normalEdgeStrength > 0.0)\r\n\t\t\t\t\t\tnei = normalEdgeIndicator(depth, normal);\r\n\r\n\t\t\t\t\tfloat Strength = dei > 0.0 ? (1.0 - depthEdgeStrength * dei) : (1.0 + normalEdgeStrength * nei);\r\n\r\n\t\t\t\t\tgl_FragColor = texel * Strength;\r\n\r\n\t\t\t\t}\r\n\t\t\t`\r\n\t\t} );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { RenderPixelatedPass };\r\n"],
  "mappings": "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",
  "names": []
}
