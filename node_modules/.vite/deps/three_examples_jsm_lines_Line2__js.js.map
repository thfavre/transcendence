{
  "version": 3,
  "sources": ["../../three/examples/jsm/lines/LineSegments2.js", "../../three/examples/jsm/lines/Line2.js"],
  "sourcesContent": ["import {\r\n\tBox3,\r\n\tInstancedInterleavedBuffer,\r\n\tInterleavedBufferAttribute,\r\n\tLine3,\r\n\tMathUtils,\r\n\tMatrix4,\r\n\tMesh,\r\n\tSphere,\r\n\tVector3,\r\n\tVector4\r\n} from 'three';\r\nimport { LineSegmentsGeometry } from '../lines/LineSegmentsGeometry.js';\r\nimport { LineMaterial } from '../lines/LineMaterial.js';\r\n\r\nconst _start = new Vector3();\r\nconst _end = new Vector3();\r\n\r\nconst _start4 = new Vector4();\r\nconst _end4 = new Vector4();\r\n\r\nconst _ssOrigin = new Vector4();\r\nconst _ssOrigin3 = new Vector3();\r\nconst _mvMatrix = new Matrix4();\r\nconst _line = new Line3();\r\nconst _closestPoint = new Vector3();\r\n\r\nconst _box = new Box3();\r\nconst _sphere = new Sphere();\r\nconst _clipToWorldVector = new Vector4();\r\n\r\nlet _ray, _lineWidth;\r\n\r\n// Returns the margin required to expand by in world space given the distance from the camera,\r\n// line width, resolution, and camera projection\r\nfunction getWorldSpaceHalfWidth( camera, distance, resolution ) {\r\n\r\n\t// transform into clip space, adjust the x and y values by the pixel width offset, then\r\n\t// transform back into world space to get world offset. Note clip space is [-1, 1] so full\r\n\t// width does not need to be halved.\r\n\t_clipToWorldVector.set( 0, 0, - distance, 1.0 ).applyMatrix4( camera.projectionMatrix );\r\n\t_clipToWorldVector.multiplyScalar( 1.0 / _clipToWorldVector.w );\r\n\t_clipToWorldVector.x = _lineWidth / resolution.width;\r\n\t_clipToWorldVector.y = _lineWidth / resolution.height;\r\n\t_clipToWorldVector.applyMatrix4( camera.projectionMatrixInverse );\r\n\t_clipToWorldVector.multiplyScalar( 1.0 / _clipToWorldVector.w );\r\n\r\n\treturn Math.abs( Math.max( _clipToWorldVector.x, _clipToWorldVector.y ) );\r\n\r\n}\r\n\r\nfunction raycastWorldUnits( lineSegments, intersects ) {\r\n\r\n\tconst matrixWorld = lineSegments.matrixWorld;\r\n\tconst geometry = lineSegments.geometry;\r\n\tconst instanceStart = geometry.attributes.instanceStart;\r\n\tconst instanceEnd = geometry.attributes.instanceEnd;\r\n\tconst segmentCount = Math.min( geometry.instanceCount, instanceStart.count );\r\n\r\n\tfor ( let i = 0, l = segmentCount; i < l; i ++ ) {\r\n\r\n\t\t_line.start.fromBufferAttribute( instanceStart, i );\r\n\t\t_line.end.fromBufferAttribute( instanceEnd, i );\r\n\r\n\t\t_line.applyMatrix4( matrixWorld );\r\n\r\n\t\tconst pointOnLine = new Vector3();\r\n\t\tconst point = new Vector3();\r\n\r\n\t\t_ray.distanceSqToSegment( _line.start, _line.end, point, pointOnLine );\r\n\t\tconst isInside = point.distanceTo( pointOnLine ) < _lineWidth * 0.5;\r\n\r\n\t\tif ( isInside ) {\r\n\r\n\t\t\tintersects.push( {\r\n\t\t\t\tpoint,\r\n\t\t\t\tpointOnLine,\r\n\t\t\t\tdistance: _ray.origin.distanceTo( point ),\r\n\t\t\t\tobject: lineSegments,\r\n\t\t\t\tface: null,\r\n\t\t\t\tfaceIndex: i,\r\n\t\t\t\tuv: null,\r\n\t\t\t\tuv1: null,\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction raycastScreenSpace( lineSegments, camera, intersects ) {\r\n\r\n\tconst projectionMatrix = camera.projectionMatrix;\r\n\tconst material = lineSegments.material;\r\n\tconst resolution = material.resolution;\r\n\tconst matrixWorld = lineSegments.matrixWorld;\r\n\r\n\tconst geometry = lineSegments.geometry;\r\n\tconst instanceStart = geometry.attributes.instanceStart;\r\n\tconst instanceEnd = geometry.attributes.instanceEnd;\r\n\tconst segmentCount = Math.min( geometry.instanceCount, instanceStart.count );\r\n\r\n\tconst near = - camera.near;\r\n\r\n\t//\r\n\r\n\t// pick a point 1 unit out along the ray to avoid the ray origin\r\n\t// sitting at the camera origin which will cause \"w\" to be 0 when\r\n\t// applying the projection matrix.\r\n\t_ray.at( 1, _ssOrigin );\r\n\r\n\t// ndc space [ - 1.0, 1.0 ]\r\n\t_ssOrigin.w = 1;\r\n\t_ssOrigin.applyMatrix4( camera.matrixWorldInverse );\r\n\t_ssOrigin.applyMatrix4( projectionMatrix );\r\n\t_ssOrigin.multiplyScalar( 1 / _ssOrigin.w );\r\n\r\n\t// screen space\r\n\t_ssOrigin.x *= resolution.x / 2;\r\n\t_ssOrigin.y *= resolution.y / 2;\r\n\t_ssOrigin.z = 0;\r\n\r\n\t_ssOrigin3.copy( _ssOrigin );\r\n\r\n\t_mvMatrix.multiplyMatrices( camera.matrixWorldInverse, matrixWorld );\r\n\r\n\tfor ( let i = 0, l = segmentCount; i < l; i ++ ) {\r\n\r\n\t\t_start4.fromBufferAttribute( instanceStart, i );\r\n\t\t_end4.fromBufferAttribute( instanceEnd, i );\r\n\r\n\t\t_start4.w = 1;\r\n\t\t_end4.w = 1;\r\n\r\n\t\t// camera space\r\n\t\t_start4.applyMatrix4( _mvMatrix );\r\n\t\t_end4.applyMatrix4( _mvMatrix );\r\n\r\n\t\t// skip the segment if it's entirely behind the camera\r\n\t\tconst isBehindCameraNear = _start4.z > near && _end4.z > near;\r\n\t\tif ( isBehindCameraNear ) {\r\n\r\n\t\t\tcontinue;\r\n\r\n\t\t}\r\n\r\n\t\t// trim the segment if it extends behind camera near\r\n\t\tif ( _start4.z > near ) {\r\n\r\n\t\t\tconst deltaDist = _start4.z - _end4.z;\r\n\t\t\tconst t = ( _start4.z - near ) / deltaDist;\r\n\t\t\t_start4.lerp( _end4, t );\r\n\r\n\t\t} else if ( _end4.z > near ) {\r\n\r\n\t\t\tconst deltaDist = _end4.z - _start4.z;\r\n\t\t\tconst t = ( _end4.z - near ) / deltaDist;\r\n\t\t\t_end4.lerp( _start4, t );\r\n\r\n\t\t}\r\n\r\n\t\t// clip space\r\n\t\t_start4.applyMatrix4( projectionMatrix );\r\n\t\t_end4.applyMatrix4( projectionMatrix );\r\n\r\n\t\t// ndc space [ - 1.0, 1.0 ]\r\n\t\t_start4.multiplyScalar( 1 / _start4.w );\r\n\t\t_end4.multiplyScalar( 1 / _end4.w );\r\n\r\n\t\t// screen space\r\n\t\t_start4.x *= resolution.x / 2;\r\n\t\t_start4.y *= resolution.y / 2;\r\n\r\n\t\t_end4.x *= resolution.x / 2;\r\n\t\t_end4.y *= resolution.y / 2;\r\n\r\n\t\t// create 2d segment\r\n\t\t_line.start.copy( _start4 );\r\n\t\t_line.start.z = 0;\r\n\r\n\t\t_line.end.copy( _end4 );\r\n\t\t_line.end.z = 0;\r\n\r\n\t\t// get closest point on ray to segment\r\n\t\tconst param = _line.closestPointToPointParameter( _ssOrigin3, true );\r\n\t\t_line.at( param, _closestPoint );\r\n\r\n\t\t// check if the intersection point is within clip space\r\n\t\tconst zPos = MathUtils.lerp( _start4.z, _end4.z, param );\r\n\t\tconst isInClipSpace = zPos >= - 1 && zPos <= 1;\r\n\r\n\t\tconst isInside = _ssOrigin3.distanceTo( _closestPoint ) < _lineWidth * 0.5;\r\n\r\n\t\tif ( isInClipSpace && isInside ) {\r\n\r\n\t\t\t_line.start.fromBufferAttribute( instanceStart, i );\r\n\t\t\t_line.end.fromBufferAttribute( instanceEnd, i );\r\n\r\n\t\t\t_line.start.applyMatrix4( matrixWorld );\r\n\t\t\t_line.end.applyMatrix4( matrixWorld );\r\n\r\n\t\t\tconst pointOnLine = new Vector3();\r\n\t\t\tconst point = new Vector3();\r\n\r\n\t\t\t_ray.distanceSqToSegment( _line.start, _line.end, point, pointOnLine );\r\n\r\n\t\t\tintersects.push( {\r\n\t\t\t\tpoint: point,\r\n\t\t\t\tpointOnLine: pointOnLine,\r\n\t\t\t\tdistance: _ray.origin.distanceTo( point ),\r\n\t\t\t\tobject: lineSegments,\r\n\t\t\t\tface: null,\r\n\t\t\t\tfaceIndex: i,\r\n\t\t\t\tuv: null,\r\n\t\t\t\tuv1: null,\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass LineSegments2 extends Mesh {\r\n\r\n\tconstructor( geometry = new LineSegmentsGeometry(), material = new LineMaterial( { color: Math.random() * 0xffffff } ) ) {\r\n\r\n\t\tsuper( geometry, material );\r\n\r\n\t\tthis.isLineSegments2 = true;\r\n\r\n\t\tthis.type = 'LineSegments2';\r\n\r\n\t}\r\n\r\n\t// for backwards-compatibility, but could be a method of LineSegmentsGeometry...\r\n\r\n\tcomputeLineDistances() {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\r\n\t\tconst instanceStart = geometry.attributes.instanceStart;\r\n\t\tconst instanceEnd = geometry.attributes.instanceEnd;\r\n\t\tconst lineDistances = new Float32Array( 2 * instanceStart.count );\r\n\r\n\t\tfor ( let i = 0, j = 0, l = instanceStart.count; i < l; i ++, j += 2 ) {\r\n\r\n\t\t\t_start.fromBufferAttribute( instanceStart, i );\r\n\t\t\t_end.fromBufferAttribute( instanceEnd, i );\r\n\r\n\t\t\tlineDistances[ j ] = ( j === 0 ) ? 0 : lineDistances[ j - 1 ];\r\n\t\t\tlineDistances[ j + 1 ] = lineDistances[ j ] + _start.distanceTo( _end );\r\n\r\n\t\t}\r\n\r\n\t\tconst instanceDistanceBuffer = new InstancedInterleavedBuffer( lineDistances, 2, 1 ); // d0, d1\r\n\r\n\t\tgeometry.setAttribute( 'instanceDistanceStart', new InterleavedBufferAttribute( instanceDistanceBuffer, 1, 0 ) ); // d0\r\n\t\tgeometry.setAttribute( 'instanceDistanceEnd', new InterleavedBufferAttribute( instanceDistanceBuffer, 1, 1 ) ); // d1\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\traycast( raycaster, intersects ) {\r\n\r\n\t\tconst worldUnits = this.material.worldUnits;\r\n\t\tconst camera = raycaster.camera;\r\n\r\n\t\tif ( camera === null && ! worldUnits ) {\r\n\r\n\t\t\tconsole.error( 'LineSegments2: \"Raycaster.camera\" needs to be set in order to raycast against LineSegments2 while worldUnits is set to false.' );\r\n\r\n\t\t}\r\n\r\n\t\tconst threshold = ( raycaster.params.Line2 !== undefined ) ? raycaster.params.Line2.threshold || 0 : 0;\r\n\r\n\t\t_ray = raycaster.ray;\r\n\r\n\t\tconst matrixWorld = this.matrixWorld;\r\n\t\tconst geometry = this.geometry;\r\n\t\tconst material = this.material;\r\n\r\n\t\t_lineWidth = material.linewidth + threshold;\r\n\r\n\t\t// check if we intersect the sphere bounds\r\n\t\tif ( geometry.boundingSphere === null ) {\r\n\r\n\t\t\tgeometry.computeBoundingSphere();\r\n\r\n\t\t}\r\n\r\n\t\t_sphere.copy( geometry.boundingSphere ).applyMatrix4( matrixWorld );\r\n\r\n\t\t// increase the sphere bounds by the worst case line screen space width\r\n\t\tlet sphereMargin;\r\n\t\tif ( worldUnits ) {\r\n\r\n\t\t\tsphereMargin = _lineWidth * 0.5;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst distanceToSphere = Math.max( camera.near, _sphere.distanceToPoint( _ray.origin ) );\r\n\t\t\tsphereMargin = getWorldSpaceHalfWidth( camera, distanceToSphere, material.resolution );\r\n\r\n\t\t}\r\n\r\n\t\t_sphere.radius += sphereMargin;\r\n\r\n\t\tif ( _ray.intersectsSphere( _sphere ) === false ) {\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\t// check if we intersect the box bounds\r\n\t\tif ( geometry.boundingBox === null ) {\r\n\r\n\t\t\tgeometry.computeBoundingBox();\r\n\r\n\t\t}\r\n\r\n\t\t_box.copy( geometry.boundingBox ).applyMatrix4( matrixWorld );\r\n\r\n\t\t// increase the box bounds by the worst case line width\r\n\t\tlet boxMargin;\r\n\t\tif ( worldUnits ) {\r\n\r\n\t\t\tboxMargin = _lineWidth * 0.5;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst distanceToBox = Math.max( camera.near, _box.distanceToPoint( _ray.origin ) );\r\n\t\t\tboxMargin = getWorldSpaceHalfWidth( camera, distanceToBox, material.resolution );\r\n\r\n\t\t}\r\n\r\n\t\t_box.expandByScalar( boxMargin );\r\n\r\n\t\tif ( _ray.intersectsBox( _box ) === false ) {\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( worldUnits ) {\r\n\r\n\t\t\traycastWorldUnits( this, intersects );\r\n\r\n\t\t} else {\r\n\r\n\t\t\traycastScreenSpace( this, camera, intersects );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { LineSegments2 };\r\n", "import { LineSegments2 } from '../lines/LineSegments2.js';\r\nimport { LineGeometry } from '../lines/LineGeometry.js';\r\nimport { LineMaterial } from '../lines/LineMaterial.js';\r\n\r\nclass Line2 extends LineSegments2 {\r\n\r\n\tconstructor( geometry = new LineGeometry(), material = new LineMaterial( { color: Math.random() * 0xffffff } ) ) {\r\n\r\n\t\tsuper( geometry, material );\r\n\r\n\t\tthis.isLine2 = true;\r\n\r\n\t\tthis.type = 'Line2';\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Line2 };\r\n"],
  "mappings": "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",
  "names": []
}
