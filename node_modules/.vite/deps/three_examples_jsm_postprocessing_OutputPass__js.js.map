{
  "version": 3,
  "sources": ["../../three/examples/jsm/shaders/OutputShader.js", "../../three/examples/jsm/postprocessing/OutputPass.js"],
  "sourcesContent": ["const OutputShader = {\r\n\r\n\tname: 'OutputShader',\r\n\r\n\tuniforms: {\r\n\r\n\t\t'tDiffuse': { value: null },\r\n\t\t'toneMappingExposure': { value: 1 }\r\n\r\n\t},\r\n\r\n\tvertexShader: /* glsl */`\r\n\t\tprecision highp float;\r\n\r\n\t\tuniform mat4 modelViewMatrix;\r\n\t\tuniform mat4 projectionMatrix;\r\n\r\n\t\tattribute vec3 position;\r\n\t\tattribute vec2 uv;\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvUv = uv;\r\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t\t}`,\r\n\r\n\tfragmentShader: /* glsl */`\r\n\t\r\n\t\tprecision highp float;\r\n\r\n\t\tuniform sampler2D tDiffuse;\r\n\r\n\t\t#include <tonemapping_pars_fragment>\r\n\t\t#include <colorspace_pars_fragment>\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tgl_FragColor = texture2D( tDiffuse, vUv );\r\n\r\n\t\t\t// tone mapping\r\n\r\n\t\t\t#ifdef LINEAR_TONE_MAPPING\r\n\r\n\t\t\t\tgl_FragColor.rgb = LinearToneMapping( gl_FragColor.rgb );\r\n\r\n\t\t\t#elif defined( REINHARD_TONE_MAPPING )\r\n\r\n\t\t\t\tgl_FragColor.rgb = ReinhardToneMapping( gl_FragColor.rgb );\r\n\r\n\t\t\t#elif defined( CINEON_TONE_MAPPING )\r\n\r\n\t\t\t\tgl_FragColor.rgb = OptimizedCineonToneMapping( gl_FragColor.rgb );\r\n\r\n\t\t\t#elif defined( ACES_FILMIC_TONE_MAPPING )\r\n\r\n\t\t\t\tgl_FragColor.rgb = ACESFilmicToneMapping( gl_FragColor.rgb );\r\n\r\n\t\t\t#elif defined( AGX_TONE_MAPPING )\r\n\r\n\t\t\t\tgl_FragColor.rgb = AgXToneMapping( gl_FragColor.rgb );\r\n\r\n\t\t\t#elif defined( NEUTRAL_TONE_MAPPING )\r\n\r\n\t\t\t\tgl_FragColor.rgb = NeutralToneMapping( gl_FragColor.rgb );\r\n\r\n\t\t\t#endif\r\n\r\n\t\t\t// color space\r\n\r\n\t\t\t#ifdef SRGB_TRANSFER\r\n\r\n\t\t\t\tgl_FragColor = sRGBTransferOETF( gl_FragColor );\r\n\r\n\t\t\t#endif\r\n\r\n\t\t}`\r\n\r\n};\r\n\r\nexport { OutputShader };\r\n", "import {\r\n\tColorManagement,\r\n\tRawShaderMaterial,\r\n\tUniformsUtils,\r\n\tLinearToneMapping,\r\n\tReinhardToneMapping,\r\n\tCineonToneMapping,\r\n\tAgXToneMapping,\r\n\tACESFilmicToneMapping,\r\n\tNeutralToneMapping,\r\n\tSRGBTransfer\r\n} from 'three';\r\nimport { Pass, FullScreenQuad } from './Pass.js';\r\nimport { OutputShader } from '../shaders/OutputShader.js';\r\n\r\nclass OutputPass extends Pass {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\t//\r\n\r\n\t\tconst shader = OutputShader;\r\n\r\n\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\r\n\r\n\t\tthis.material = new RawShaderMaterial( {\r\n\t\t\tname: shader.name,\r\n\t\t\tuniforms: this.uniforms,\r\n\t\t\tvertexShader: shader.vertexShader,\r\n\t\t\tfragmentShader: shader.fragmentShader\r\n\t\t} );\r\n\r\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\r\n\r\n\t\t// internal cache\r\n\r\n\t\tthis._outputColorSpace = null;\r\n\t\tthis._toneMapping = null;\r\n\r\n\t}\r\n\r\n\trender( renderer, writeBuffer, readBuffer/*, deltaTime, maskActive */ ) {\r\n\r\n\t\tthis.uniforms[ 'tDiffuse' ].value = readBuffer.texture;\r\n\t\tthis.uniforms[ 'toneMappingExposure' ].value = renderer.toneMappingExposure;\r\n\r\n\t\t// rebuild defines if required\r\n\r\n\t\tif ( this._outputColorSpace !== renderer.outputColorSpace || this._toneMapping !== renderer.toneMapping ) {\r\n\r\n\t\t\tthis._outputColorSpace = renderer.outputColorSpace;\r\n\t\t\tthis._toneMapping = renderer.toneMapping;\r\n\r\n\t\t\tthis.material.defines = {};\r\n\r\n\t\t\tif ( ColorManagement.getTransfer( this._outputColorSpace ) === SRGBTransfer ) this.material.defines.SRGB_TRANSFER = '';\r\n\r\n\t\t\tif ( this._toneMapping === LinearToneMapping ) this.material.defines.LINEAR_TONE_MAPPING = '';\r\n\t\t\telse if ( this._toneMapping === ReinhardToneMapping ) this.material.defines.REINHARD_TONE_MAPPING = '';\r\n\t\t\telse if ( this._toneMapping === CineonToneMapping ) this.material.defines.CINEON_TONE_MAPPING = '';\r\n\t\t\telse if ( this._toneMapping === ACESFilmicToneMapping ) this.material.defines.ACES_FILMIC_TONE_MAPPING = '';\r\n\t\t\telse if ( this._toneMapping === AgXToneMapping ) this.material.defines.AGX_TONE_MAPPING = '';\r\n\t\t\telse if ( this._toneMapping === NeutralToneMapping ) this.material.defines.NEUTRAL_TONE_MAPPING = '';\r\n\r\n\t\t\tthis.material.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( this.renderToScreen === true ) {\r\n\r\n\t\t\trenderer.setRenderTarget( null );\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderer.setRenderTarget( writeBuffer );\r\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\r\n\t\t\tthis.fsQuad.render( renderer );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.material.dispose();\r\n\t\tthis.fsQuad.dispose();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { OutputPass };\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,IAAM,eAAe;AAAA,EAEpB,MAAM;AAAA,EAEN,UAAU;AAAA,IAET,YAAY,EAAE,OAAO,KAAK;AAAA,IAC1B,uBAAuB,EAAE,OAAO,EAAE;AAAA,EAEnC;AAAA,EAEA;AAAA;AAAA,IAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBxB;AAAA;AAAA,IAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqD3B;;;ACnEA,IAAM,aAAN,cAAyB,KAAK;AAAA,EAE7B,cAAc;AAEb,UAAM;AAIN,UAAM,SAAS;AAEf,SAAK,WAAW,cAAc,MAAO,OAAO,QAAS;AAErD,SAAK,WAAW,IAAI,kBAAmB;AAAA,MACtC,MAAM,OAAO;AAAA,MACb,UAAU,KAAK;AAAA,MACf,cAAc,OAAO;AAAA,MACrB,gBAAgB,OAAO;AAAA,IACxB,CAAE;AAEF,SAAK,SAAS,IAAI,eAAgB,KAAK,QAAS;AAIhD,SAAK,oBAAoB;AACzB,SAAK,eAAe;AAAA,EAErB;AAAA,EAEA,OAAQ,UAAU,aAAa,YAAyC;AAEvE,SAAK,SAAU,UAAW,EAAE,QAAQ,WAAW;AAC/C,SAAK,SAAU,qBAAsB,EAAE,QAAQ,SAAS;AAIxD,QAAK,KAAK,sBAAsB,SAAS,oBAAoB,KAAK,iBAAiB,SAAS,aAAc;AAEzG,WAAK,oBAAoB,SAAS;AAClC,WAAK,eAAe,SAAS;AAE7B,WAAK,SAAS,UAAU,CAAC;AAEzB,UAAK,gBAAgB,YAAa,KAAK,iBAAkB,MAAM;AAAe,aAAK,SAAS,QAAQ,gBAAgB;AAEpH,UAAK,KAAK,iBAAiB;AAAoB,aAAK,SAAS,QAAQ,sBAAsB;AAAA,eACjF,KAAK,iBAAiB;AAAsB,aAAK,SAAS,QAAQ,wBAAwB;AAAA,eAC1F,KAAK,iBAAiB;AAAoB,aAAK,SAAS,QAAQ,sBAAsB;AAAA,eACtF,KAAK,iBAAiB;AAAwB,aAAK,SAAS,QAAQ,2BAA2B;AAAA,eAC/F,KAAK,iBAAiB;AAAiB,aAAK,SAAS,QAAQ,mBAAmB;AAAA,eAChF,KAAK,iBAAiB;AAAqB,aAAK,SAAS,QAAQ,uBAAuB;AAElG,WAAK,SAAS,cAAc;AAAA,IAE7B;AAIA,QAAK,KAAK,mBAAmB,MAAO;AAEnC,eAAS,gBAAiB,IAAK;AAC/B,WAAK,OAAO,OAAQ,QAAS;AAAA,IAE9B,OAAO;AAEN,eAAS,gBAAiB,WAAY;AACtC,UAAK,KAAK;AAAQ,iBAAS,MAAO,SAAS,gBAAgB,SAAS,gBAAgB,SAAS,gBAAiB;AAC9G,WAAK,OAAO,OAAQ,QAAS;AAAA,IAE9B;AAAA,EAED;AAAA,EAEA,UAAU;AAET,SAAK,SAAS,QAAQ;AACtB,SAAK,OAAO,QAAQ;AAAA,EAErB;AAED;",
  "names": []
}
